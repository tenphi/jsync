// Generated by CoffeeScript 1.3.3
(function() {
  var clear, coffee, extend, findWatcher, fs, jsync, list;

  fs = require('fs');

  coffee = require('coffee-script');

  list = [];

  jsync = function(file, interval, context, handler) {
    var obj, watcher;
    if (typeof context === 'function') {
      handler = context;
      context = void 0;
    }
    obj = jsync.read(file, context);
    if (handler) {
      obj = handler(obj) || obj;
    }
    watcher = function() {
      var ext;
      ext = jsync.read(file, watcher.context);
      if (handler) {
        ext = handler(ext) || ext;
      }
      clear(obj);
      return extend(obj, ext);
    };
    fs.watchFile(file, {
      persistent: true,
      interval: interval || 500
    }, watcher);
    watcher.file = file;
    watcher.context = context;
    list.push([obj, watcher]);
    return obj;
  };

  jsync.unwatch = function(obj) {
    var wId, watcher;
    wId = findWatcher(obj);
    if (wId === void 0) {
      return jsync;
    }
    watcher = list[wId][1];
    if (watcher) {
      fs.unwatchFile(watcher.file, watcher);
    }
    list.splice(wId, 1);
    return jsync;
  };

  jsync.trigger = function(obj, context) {
    var watcher;
    watcher = list[findWatcher(obj)][1];
    watcher.context = context || watcher.context;
    watcher();
    return jsync;
  };

  findWatcher = function(obj) {
    var entry, i, _i, _len;
    for (i = _i = 0, _len = list.length; _i < _len; i = ++_i) {
      entry = list[i];
      if (entry[0] === obj) {
        return i;
      }
    }
  };

  jsync.read = function(file, context) {
    var data, isCoffee;
    data = fs.readFileSync(file, 'utf-8');
    isCoffee = !!file.match(/\.coffee$/);
    try {
      return (function() {
        if (isCoffee) {
          data = '(\n' + data.split('\n').map(function(s) {
            return '	' + s;
          }).join('\n') + '\n)';
          return coffee["eval"](data, {
            sandbox: context
          });
        } else {
          return eval('(' + data + ')');
        }
      }).call(context || global);
    } catch (e) {
      console.log('Cant\'t parse file `' + file + '`');
      return {};
    }
  };

  clear = function(obj) {
    var name, _results;
    if ('length' in obj && 'splice' in obj) {
      return obj.splice(0, obj.length);
    } else {
      _results = [];
      for (name in obj) {
        _results.push(delete obj[name]);
      }
      return _results;
    }
  };

  extend = function(obj, ext) {
    var name, _results;
    _results = [];
    for (name in ext) {
      _results.push(obj[name] = ext[name]);
    }
    return _results;
  };

  module.exports = jsync;

}).call(this);
