// Generated by CoffeeScript 1.3.3
(function() {
  var arrFileCS, arrFileJS, context, context2, exampleArrCS1, exampleArrCS2, exampleArrJS1, exampleArrJS2, exampleObjCS1, exampleObjCS2, exampleObjJS1, exampleObjJS2, fs, jsync, objFileCS, objFileJS, testArr1, testArr2, testArr3, testObj1, testObj2, testObj3;

  fs = require('fs');

  jsync = require('./jsync.js');

  testObj1 = function(obj) {
    return obj.prop === 'value' && Object.keys(obj).length === 3 && typeof obj.func === 'function';
  };

  testArr1 = function(arr) {
    return arr[0] === 'value' && arr.length === 3 && typeof arr[2] === 'function';
  };

  testObj2 = function(obj) {
    return obj.context === 'foo' && Object.keys(obj).length === 2 && typeof obj.func === 'function';
  };

  testArr2 = function(arr) {
    return arr[0] === 'foo' && arr.length === 2 && typeof arr[1] === 'function';
  };

  testObj3 = function(obj) {
    return obj.context === 'bar' && Object.keys(obj).length === 2 && typeof obj.func === 'function';
  };

  testArr3 = function(arr) {
    return arr[0] === 'bar' && arr.length === 2 && typeof arr[1] === 'function';
  };

  objFileJS = __dirname + '/example_obj.js';

  arrFileJS = __dirname + '/example_arr.js';

  objFileCS = __dirname + '/example_obj.coffee';

  arrFileCS = __dirname + '/example_arr.coffee';

  exampleArrCS1 = '["value", @prop, -> no]';

  exampleArrJS1 = "['value', this.prop, function() {return false;}]";

  exampleObjCS1 = "prop: 'value'\ncontext: this.prop\nfunc: -> no\n";

  exampleObjJS1 = "{\n	prop: 'value',\n	context: this.prop,\n	func: function() {return false;}\n}";

  exampleArrCS2 = '[@prop, -> no]';

  exampleArrJS2 = "[this.prop, function() {return false;}]";

  exampleObjCS2 = "context: this.prop\nfunc: -> no\n";

  exampleObjJS2 = "{\n	context: this.prop,\n	func: function() {return false;}\n}";

  context = {
    prop: 'foo'
  };

  context2 = {
    prop: 'bar'
  };

  module.exports = {
    read: {
      js: {
        obj: function(test) {
          var obj;
          fs.writeFileSync(objFileJS, exampleObjJS1, 'utf-8');
          obj = jsync.read(objFileJS);
          test.ok(testObj1(obj));
          return test.done();
        },
        arr: function(test) {
          var arr;
          fs.writeFileSync(arrFileJS, exampleArrJS1, 'utf-8');
          arr = jsync.read(arrFileJS);
          test.ok(testArr1(arr));
          return test.done();
        }
      },
      coffee: {
        obj: function(test) {
          var obj;
          fs.writeFileSync(objFileCS, exampleObjCS1, 'utf-8');
          obj = jsync.read(objFileCS);
          test.ok(testObj1(obj));
          return test.done();
        },
        arr: function(test) {
          var arr;
          fs.writeFileSync(arrFileCS, exampleArrCS1, 'utf-8');
          arr = jsync.read(arrFileCS);
          test.ok(testArr1(arr));
          return test.done();
        }
      }
    },
    syncAndHandle: {
      js: {
        obj: function(test) {
          var counter, obj;
          test.expect(3);
          counter = 0;
          obj = jsync(objFileJS, 100, context, function(obj) {
            if (counter === 2) {
              test.ok(true);
              return;
            }
            if (!counter) {
              counter++;
              return;
            }
            counter++;
            return test.ok(testObj2(obj));
          });
          setTimeout(function() {
            return fs.writeFileSync(objFileJS, exampleObjJS2, 'utf-8');
          }, 10);
          setTimeout(function() {
            return jsync.trigger(obj);
          }, 150);
          return setTimeout(function() {
            test.ok(testObj2(obj));
            jsync.unwatch(obj);
            return test.done();
          }, 200);
        },
        arr: function(test) {
          var arr, counter;
          test.expect(3);
          counter = 0;
          arr = jsync(arrFileJS, 100, context, function(arr) {
            if (counter === 2) {
              test.ok(testArr3(arr));
              return;
            }
            if (!counter) {
              counter++;
              return;
            }
            counter++;
            return test.ok(testArr2(arr));
          });
          setTimeout(function() {
            return fs.writeFileSync(arrFileJS, exampleArrJS2, 'utf-8');
          }, 10);
          setTimeout(function() {
            return jsync.trigger(arr, context2);
          }, 150);
          return setTimeout(function() {
            test.ok(testArr3(arr));
            jsync.unwatch(arr);
            return test.done();
          }, 200);
        }
      },
      coffee: {
        obj: function(test) {
          var counter, obj;
          test.expect(3);
          counter = 0;
          obj = jsync(objFileCS, 100, context, function(obj) {
            if (counter === 2) {
              test.ok(testObj3(obj));
              return;
            }
            if (!counter) {
              counter++;
              return;
            }
            counter++;
            return test.ok(testObj2(obj));
          });
          setTimeout(function() {
            return fs.writeFileSync(objFileCS, exampleObjCS2, 'utf-8');
          }, 10);
          setTimeout(function() {
            return jsync.trigger(obj, context2);
          }, 150);
          return setTimeout(function() {
            test.ok(testObj3(obj));
            jsync.unwatch(obj);
            return test.done();
          }, 200);
        },
        arr: function(test) {
          var arr, counter;
          test.expect(3);
          counter = 0;
          arr = jsync(arrFileCS, 100, context, function(arr) {
            if (counter === 2) {
              test.ok(true);
              return;
            }
            if (!counter) {
              counter++;
              return;
            }
            counter++;
            return test.ok(testArr2(arr));
          });
          setTimeout(function() {
            return fs.writeFileSync(arrFileCS, exampleArrCS2, 'utf-8');
          }, 10);
          setTimeout(function() {
            return jsync.trigger(arr);
          }, 150);
          return setTimeout(function() {
            test.ok(testArr2(arr));
            jsync.unwatch(arr);
            return test.done();
          }, 200);
        }
      }
    }
  };

  setTimeout(function() {
    fs.unlinkSync(objFileJS);
    fs.unlinkSync(arrFileCS);
    fs.unlinkSync(objFileCS);
    return fs.unlinkSync(arrFileJS);
  }, 1000);

}).call(this);
