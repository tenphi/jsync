// Generated by CoffeeScript 1.3.3
(function() {
  var Watcher, createFileWatcher, fs;

  fs = require('fs');

  Watcher = module.exports = function(files, options) {
    var file, _i, _len;
    if (options == null) {
      options = {};
    }
    if (!this instanceof Watcher) {
      return new Watcher(files, options);
    }
    if (!Array.isArray(files)) {
      files = [files];
    }
    this.files = files;
    this.watchers = {};
    this.data = {};
    this.readHandler = options.read;
    this.saveHandler = options.save;
    this.sandbox = options.sandbox;
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      file = files[_i];
      this.add(file);
    }
    return this;
  };

  Watcher.prototype.watching = false;

  Watcher.prototype.saving = false;

  Watcher.prototype.save = function(sfile, nl) {
    var file, out, _i, _j, _len, _len1, _ref, _ref1;
    if (!sfile && !this.saveFile) {
      return this;
    }
    this.saving = true;
    out = '';
    if (this.saveHandler) {
      _ref = this.files;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        file = _ref[_i];
        out += (this.saveHandler(this.data[file]) || ' ') + (nl != null ? nl : {
          '\r\n': ''
        });
      }
    } else {
      _ref1 = this.files;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        file = _ref1[_j];
        out += (this.data[file] || ' ') + (nl != null ? nl : {
          '\r\n': ''
        });
      }
    }
    console.log(Object.prototype.toString.call(this.data[file]));
    console.log(out);
    fs.writeFileSync(sfile, out, 'utf-8');
    return this;
  };

  Watcher.prototype.watch = function(interval) {
    var file, _i, _len, _ref;
    this.watching = true;
    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      fs.watch(file, this.watcher[file]);
    }
    return this;
  };

  Watcher.prototype.unwatch = function() {
    var file, _i, _len, _ref;
    this.watching = false;
    _ref = this.files;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      file = _ref[_i];
      fs.unwatch(file, this.watcher[file]);
    }
    return this;
  };

  Watcher.prototype.add = function(file) {
    this.files.push(file);
    this.watchers[file] = createFileWatcher(this, file);
    if (this.watching) {
      this.watch();
    }
    if (this.saving) {
      this.save();
    }
    return this;
  };

  Watcher.prototype["delete"] = function(dfile) {
    var file, i;
    i = 0;
    while (i < files.length) {
      file = files[i];
      if (file === dfile) {
        delete this.watchers[dfile];
        delete this.data[dfile];
        this.files.slice(i, 1);
        break;
      }
      i++;
    }
    return this;
  };

  createFileWatcher = function(watcher, file) {
    watcher.data[file] = fs.readFileSync(file, 'utf-8');
    return watcher.data[file] = typeof watcher.readHandler === "function" ? watcher.readHandler(watcher.data[file]) : void 0;
  };

}).call(this);
